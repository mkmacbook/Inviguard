package com.example.inviguard;

import android.app.Dialog;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.LinearGradient;
import android.graphics.Shader;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.view.View;
import android.view.ViewTreeObserver;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;
import java.util.ArrayList;
import okhttp3.*;
import org.json.JSONException;
import org.json.JSONObject;
import android.util.Log;

public class ResultActivity extends AppCompatActivity {

    private TextView riskScore;
    private TextView riskText;
    private TextView riskLevel1;
    private TextView riskLevel1Text;
    private TextView ieumMessageText;
    private TextView textResultNotify;
    private LinearLayout riskTypesTexts;

    private Button buttonReport;
    private Button buttonAdditional;
    private Button buttonMain;

    // IntentÎ°ú Î∞õÏùÑ Îç∞Ïù¥ÌÑ∞
    private int sessionId;
    private int score;
    private int isHarassment;
    private int shouldReport;
    private int sessionEvalResultId;
    private ArrayList<Integer> categoryIds;
    private ArrayList<Integer> severityList;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_result);

        // Î∑∞ Î∞îÏù∏Îî©
        riskScore = findViewById(R.id.risk_score);
        riskText = findViewById(R.id.risk_text);
        riskLevel1 = findViewById(R.id.risk_level1);
        riskLevel1Text = findViewById(R.id.risk_level1_text);
        ieumMessageText = findViewById(R.id.ieum_message_text);
        textResultNotify = findViewById(R.id.text_result_notify);
        riskTypesTexts = findViewById(R.id.risk_types_texts);

        buttonReport = findViewById(R.id.button_report);
        buttonAdditional = findViewById(R.id.button_additional);
        buttonMain = findViewById(R.id.button_main);

        // IntentÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î∞õÍ∏∞
        getIntentData();

        // UI ÏÑ∏ÌåÖ
        setupUI();

        // Î≤ÑÌäº ÌÅ¥Î¶≠ Î¶¨Ïä§ÎÑà
        buttonReport.setOnClickListener(v -> showProceedDialog());
        buttonMain.setOnClickListener(v -> {
            Intent intent = new Intent(ResultActivity.this, MainBeforeActivity.class);
            startActivity(intent);
            finish();
        });
    }

    private void getIntentData() {
        sessionId = getIntent().getIntExtra("session_id", -1);
        score = getIntent().getIntExtra("risk_score", 0);
        isHarassment = getIntent().getIntExtra("is_harassment", 0);
        shouldReport = getIntent().getIntExtra("should_report", 0);
        sessionEvalResultId = getIntent().getIntExtra("session_eval_result_id", 0);
        categoryIds = getIntent().getIntegerArrayListExtra("category_ids");
        severityList = getIntent().getIntegerArrayListExtra("severity_list");

        if (categoryIds == null) categoryIds = new ArrayList<>();
        if (severityList == null) severityList = new ArrayList<>();
    }

    private void setupUI() {
        // 1. risk_score ÏÑ§Ï†ï
        riskScore.setText(score + "Ï†ê");

        // ÌÖçÏä§Ìä∏ Í∑∏ÎùºÎîîÏñ∏Ìä∏
        riskScore.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
            @Override
            public void onGlobalLayout() {
                riskScore.getViewTreeObserver().removeOnGlobalLayoutListener(this);
                Shader textShader = new LinearGradient(0, 0, 0, riskScore.getHeight(),
                        new int[]{
                                Color.parseColor("#FFC5F1F6"),
                                Color.parseColor("#FFB9F5CE")
                        }, null, Shader.TileMode.CLAMP);
                riskScore.getPaint().setShader(textShader);
            }
        });

        // 2. risk_text, ieum_message_text, text_result_notify ÏÑ§Ï†ï
        if (score >= 70) {
            riskText.setText("Ïù¥Í±¥ ÌòºÏûê Ï∞∏ÏùÑ ÏùºÏù¥ ÏïÑÎãàÏóêÏöî");
            ieumMessageText.setText("ÏßÄÍ∏à ÎäêÎÅºÎäî Í∞êÏ†ïÏùÄ Ï†àÎåÄ ÌòºÏûê Í∞êÎãπÌï† ÏùºÏù¥ ÏïÑÎãàÏóêÏöî. ÎèÑÏõÄÏùÑ ÏöîÏ≤≠ÌïòÎäî Í±¥ Ïö©Í∏∞ ÏûàÎäî ÌñâÎèôÏù¥Í≥†, ÎãπÏã†Ïù¥ Îçî ÏïàÏ†ÑÌïòÍ≥† Ìé∏ÏïàÌï† Ïàò ÏûàÎèÑÎ°ù Ìï®ÍªòÌï†Í≤åÏöî. Ï†àÎåÄ ÏûòÎ™ªÌïú Í≤å ÏïÑÎãàÎãà Íº≠ ÎèÑÏõÄÎ∞õÏúºÏÑ∏Ïöî.");
            textResultNotify.setText("Îçî Ïù¥ÏÉÅ ÌòºÏûê Í≥†ÎØºÌïòÏßÄ ÎßàÏÑ∏Ïöî, ÏßÄÍ∏à Î∞îÎ°ú Ïã†Í≥†ÌïòÏÑ∏Ïöî.");
        } else if (score >= 30) {
            riskText.setText("ÌòπÏãú Îòê ÎπÑÏä∑Ìïú ÏùºÏù¥ ÏûàÏóàÎÇòÏöî?");
            ieumMessageText.setText("ÏßÄÍ∏à Í≤™Í≥† ÏûàÎäî Î∂àÌé∏Ìï®ÏùÄ Î∂ÑÎ™Ö Ï§ëÏöîÌïú Ïã†Ìò∏ÏòàÏöî. ÌòπÏãú ÎπÑÏä∑Ìïú ÏÉÅÌô©Ïù¥ Îçî ÏûàÏóàÎäîÏßÄ, ÌòπÏùÄ Îçî ÏûêÏÑ∏Ìïú Ï¶ùÍ±∞Í∞Ä ÏûàÎã§Î©¥ Ìï®Íªò ÎÇòÎà†Ï£ºÏÑ∏Ïöî. Ï†úÍ∞Ä ÎãπÏã†Ïùò Í≤ΩÌóòÏùÑ Ï°¥Ï§ëÌïòÍ≥† ÏµúÏÑ†ÏùÑ Îã§Ìï¥ ÎèÑÏö∏Í≤åÏöî.");
            textResultNotify.setText("ÎπÑÏä∑Ìïú ÏùºÏù¥ Î∞òÎ≥µÎêúÎã§Î©¥, Ï¶ùÍ±∞Î•º Îçî Ï†úÏ∂úÌï¥ Ï£ºÏÑ∏Ïöî.");
        } else {
            riskText.setText("ÏßÄÎÇòÍ∞Ñ ÎßêÎèÑ ÎßàÏùåÏóê ÎÇ®ÏùÑ Ïàò ÏûàÏñ¥Ïöî");
            ieumMessageText.setText("ÌëúÎ©¥Ï†ÅÏúºÎ°úÎäî ÌÅ∞ Î¨∏Ï†úÍ∞Ä ÏóÜÏñ¥ Î≥¥Ïó¨ÎèÑ, ÎßàÏùåÏù¥ Î∂àÌé∏ÌñàÎçò Í±¥ Î∂ÑÎ™Ö ÏùòÎØ∏ ÏûàÎäî Í∞êÏ†ïÏù¥ÏóêÏöî. ÎßåÏïΩ Î∂àÌé∏Ìï®Ïù¥ Í≥ÑÏÜçÎêúÎã§Î©¥ Ï†úÍ≤å Ïñ∏Ï†úÎì† Ïù¥ÏïºÍ∏∞Ìï¥ Ï£ºÏÑ∏Ïöî. Îçî ÏûêÏÑ∏Ìïú ÏÉÅÌô©Ïù¥ÎÇò Ï¶ùÍ±∞Í∞Ä ÏûàÎã§Î©¥ Ìï®Íªò Í≤ÄÌÜ†Ìï¥ Î≥ºÍ≤åÏöî.");
            textResultNotify.setText("Ïñ∏Ï†úÎì† ÎèÑÏõÄÏù¥ ÌïÑÏöîÌïòÎ©¥ Îã§Ïãú Ï∞æÏïÑÏôÄ Ï£ºÏÑ∏Ïöî.");
        }

        // 3. severity ÌèâÍ∑† Í≥ÑÏÇ∞ Î∞è risk_level1 ÏÑ§Ï†ï
        double avgSeverity = calculateAverageSeverity();
        if (avgSeverity >= 1.0) {
            riskLevel1.setText("üî¥ Î™ÖÎ∞±Ìïú Í¥¥Î°≠Ìûò");
        } else if (avgSeverity >= 0.0) {
            riskLevel1.setText("üü† Î∂àÏæåÌïú Í¥¥Î°≠Ìûò");
        } else {
            riskLevel1.setText("üü¢ ÏùºÎ∞òÏ†Å Í¥¥Î°≠Ìûò");
        }

        // 4. risk_level1_text ÏÑ§Ï†ï
        riskLevel1Text.setText("¬∑  AI Î∂ÑÏÑù Ï†êÏàò : " + score + "Ï†ê");

        // 5. Í¥¥Î°≠Ìûò Ïú†Ìòï ÏÑ§Ï†ï
        setupHarassmentTypes();
    }

    private double calculateAverageSeverity() {
        if (severityList.isEmpty()) return 0.0;

        int sum = 0;
        for (int severity : severityList) {
            sum += severity;
        }
        return (double) sum / severityList.size();
    }

    private void setupHarassmentTypes() {
        // Í∏∞Ï°¥ Î∑∞Îì§ Ï†úÍ±∞
        riskTypesTexts.removeAllViews();

        for (int categoryId : categoryIds) {
            TextView typeText = new TextView(this);
            typeText.setText("¬∑  " + getHarassmentTypeDescription(categoryId));
            typeText.setTextSize(16);
            typeText.setTextColor(getResources().getColor(R.color.text_primary));

            // ÌÖçÏä§Ìä∏ Í∞ÑÍ≤© ÏÑ§Ï†ï
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
            );
            params.topMargin = (int) (10 * getResources().getDisplayMetrics().density); // 10dpÎ•º pxÎ°ú Î≥ÄÌôò
            typeText.setLayoutParams(params);

            riskTypesTexts.addView(typeText);
        }
    }

    private String getHarassmentTypeDescription(int categoryId) {
        switch (categoryId) {
            case 1: return "Í≤ΩÎ©∏, ÎπÑÎÇú, Ï°∞Î°± ÌëúÌòÑ";
            case 2: return "ÌäπÏ†ï ÏßëÎã®Ïóê ÎåÄÌïú ÌòêÏò§";
            case 3: return "Ï∞®Î≥Ñ Ï†ïÎãπÌôî ÎòêÎäî Ìé∏Í≤¨ ÌëúÌòÑ";
            case 4: return "ÏÑ±Ï†Å ÎåÄÏÉÅÌôî, ÏÑ±Ìù¨Î°±, ÏùåÎûÄ ÌëúÌòÑ";
            case 5: return "Î¨ºÎ¶¨Ï†Å¬∑Ïã¨Î¶¨Ï†Å ÏúÑÌòë, Ìè≠Î†•ÏÑ±";
            case 6: return "ÏöïÏÑ§, Î™®Ïöï, Í∞êÏ†ïÏ†Å Ìè≠Î†•";
            case 7: return "Î≤îÏ£Ñ ÌñâÏúÑÏùò Ï°∞Ïû• ÎòêÎäî Ï†ïÎãπÌôî";
            case 8: return "ÎπÑÌïòÏ†Å Ïñ∏Ïñ¥, Ïù∏Ïã†Í≥µÍ≤©";
            case 9: return "Í≥ºÎèÑÌïú ÏóÖÎ¨¥ Î∂ÄÍ≥º";
            case 10: return "Î∂ÄÎãπÌïú ÏóÖÎ¨¥ ÏßÄÏãú, ÏõêÎûò ÏóÖÎ¨¥ Ïô∏ ÏßÄÏãú";
            case 11: return "Î∂ÄÎãπÌïú ÏóÖÎ¨¥ Î∞∞Ï†ú, Îî∞ÎèåÎ¶º";
            case 12: return "Í≥†ÏùòÏ†Å ÏóÖÎ¨¥ Î∞©Ìï¥";
            case 13: return "Î∂àÌï©Î¶¨Ìïú Ïù∏ÏÇ¨Ï°∞Ïπò";
            case 14: return "ÌöåÏãùÎπÑ Í∞ïÏöî Îì± Í≤ΩÏ†úÏ†Å Î∂ÄÎã¥";
            case 15: return "ÏßÅÏû• ÎÇ¥ Í≥†Î¶Ω, Îî∞ÎèåÎ¶º";
            default: return "Ïïå Ïàò ÏóÜÎäî Ïú†Ìòï";
        }
    }

    private void showProceedDialog() {
        // dp ‚Üí px Î≥ÄÌôò
        float d = getResources().getDisplayMetrics().density;
        int widthPx = (int) (300 * d);
        int heightPx = (int) (250 * d);

        // Dialog ÏÉùÏÑ±
        Dialog dialog = new Dialog(this);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setContentView(R.layout.dialog_proceed_report);
        dialog.setCancelable(true);

        // ÎÇ¥Î∂Ä Î∑∞ Î∞îÏù∏Îî© & Î¶¨Ïä§ÎÑà
        dialog.findViewById(R.id.iv_close).setOnClickListener(v -> dialog.dismiss());
        dialog.findViewById(R.id.btn_cancel).setOnClickListener(v -> dialog.dismiss());
        dialog.findViewById(R.id.btn_confirm).setOnClickListener(v -> {
            Intent intent = new Intent(ResultActivity.this, SituationActivity.class);
            startActivity(intent);
            finish();
        });

        // ÏúàÎèÑÏö∞ ÌÅ¨Í∏∞¬∑Î∞∞Í≤Ω¬∑dim ÏÑ§Ï†ï
        Window window = dialog.getWindow();
        if (window != null) {
            window.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
            window.setLayout(widthPx, heightPx);
            window.addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
            WindowManager.LayoutParams lp = window.getAttributes();
            lp.dimAmount = 0.8f;
            window.setAttributes(lp);
        }

        dialog.show();
    }
}